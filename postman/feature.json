{
	"info": {
		"_postman_id": "c31b3309-d574-440f-9d0c-21ef4986faee",
		"name": "EWM - Raiting Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30735326"
	},
	"item": [
		{
			"name": "Запрос без оценки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.be.badRequest; // код ответа должен быть равен 400\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('message');\r",
							"    pm.expect(jsonData[0].message, '\"message\" must be \"Отсутствует оценка\"').to.eql('Отсутствует оценка');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/1000/events/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"1000",
						"events",
						"4"
					],
					"query": [
						{
							"key": "mark",
							"value": "true",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка от несуществующего пользователя Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.be.notFound; // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь не найден\"').to.eql('Пользователь не найден');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/1000/events/4?mark=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"1000",
						"events",
						"4"
					],
					"query": [
						{
							"key": "mark",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка для несуществующего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.be.notFound; // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Событие не найдено\"').to.eql('Событие не найдено');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/5/events/1000?mark=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"5",
						"events",
						"1000"
					],
					"query": [
						{
							"key": "mark",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка для своего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 409\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь не может ставить оценку своему событию\"').to.eql('Пользователь не может ставить оценку своему событию');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/1/events/2?mark=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"1",
						"events",
						"2"
					],
					"query": [
						{
							"key": "mark",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка будущего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 409\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Нельзя оценить событие, которое ещё не состоялось\"').to.eql('Нельзя оценить событие, которое ещё не состоялось');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/1/events/5?mark=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"1",
						"events",
						"5"
					],
					"query": [
						{
							"key": "mark",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка события пользователем, не принимавшим участие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 409\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь с id = 10 не принимал участие в событии с id = 2\"').to.eql('Пользователь с id = 10 не принимал участие в событии с id = 2');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/10/events/2?mark=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"10",
						"events",
						"2"
					],
					"query": [
						{
							"key": "mark",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Оценка события пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rate');\r",
							"    pm.expect(jsonData.rate, '\"rate\" must be false').to.eql(false);\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/9/events/4?mark=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"9",
						"events",
						"4"
					],
					"query": [
						{
							"key": "mark",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторная оценка события пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 409\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Оценка от пользователя с id = 9 событию с id = 4 уже поставлена\"').to.eql('Оценка от пользователя с id = 9 событию с id = 4 уже поставлена');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/9/events/4?mark=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"9",
						"events",
						"4"
					],
					"query": [
						{
							"key": "mark",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение своей оценки события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 200\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('rate');\r",
							"    pm.expect(jsonData.rate, '\"rate\" must be true').to.eql(true);\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/9/events/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"9",
						"events",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление своей оценки события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function() {\r",
							"    pm.response.to.have.status(204); // код ответа должен быть равен 204\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/9/events/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"9",
						"events",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение несуществующей оценки события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.be.notFound; // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Оценка не найдена\"').to.eql('Оценка не найдена');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/7/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"7",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление несуществующей оценки события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.be.notFound; // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message, '\"message\" must be \"Оценка не найдена\"').to.eql('Оценка не найдена');\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users/7/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users",
						"7",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий с рейтингом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 200\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение пользователей с рейтингом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные об ошибке в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 200\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/ratings/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"ratings",
						"users"
					]
				}
			},
			"response": []
		}
	]
}